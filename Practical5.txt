import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score

#2 Load Datasets
air_df=pd.read_csv("D:/DSBDA_Pr/AirQuality.csv")
heart_df=pd.read_csv("D:/DSBDA_Pr/heart.csv")


print("Air Quality Data")
print(air_df.head())

print("\n Heart Disease Data:")
print(heart_df.head())


#Data Cleaning
print("\n Missing Values in Air Quality Dataset:")
print(air_df.isnull().sum())

print("\n Missing Values in Heart Disease Dataset:")
print(heart_df.isnull().sum())


#Filling Missing Values with mean
air_df.fillna(air_df.mean(numeric_only=True),inplace=True)
heart_df.fillna(heart_df.mean(numeric_only=True),inplace=True)

#Data Integration
air_df['ID']=range(1,len(air_df)+1)
heart_df['ID']=range(1,len(heart_df)+1)

#Merged DataSet On IDs
merged=pd.merge(air_df,heart_df,on='ID',how='inner')
print(merged.head())

# ---Data Transformation
# Normalize numeric columns in heart dataset (excluding 'output')
scaler = StandardScaler()
cols_to_scale=heart_df.select_dtypes(include=['float64','int64']).columns.drop('thal')
heart_df[cols_to_scale]=scaler.fit_transform(heart_df[cols_to_scale])

# Optional transformation: square root of 'Wind' if exists
if 'Wind' in air_df.columns:
    air['Wind'] = np.sqrt(air['Wind'])

#Error Correcting
# Replace negative values in 'Ozone' (if present) with NaN and fill with mean
if 'Ozone' in air_df.columns:
    air_df['Ozone']=air_df['Ozone'].apply(lambda x: np.nan if x< 0 else  x)
    air_df['Ozone'].fillna(air['Ozone'].mean(),inplace=True)

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import classification_report, accuracy_score

# Use 'sex' as the target for classification
X = heart_df.drop('sex', axis=1)
y = heart_df['sex']

# Normalize features (optional)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train logistic regression
model = LogisticRegression()
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))